# ---- CALL DEB PARAMETERS
#### ------------------------------------
#--- Manually transfered in R script
#source(paste(dir,"DEB param RBT.R", sep="/"))
#--- Automatically importes from .mat file
par=readMat(gsub("R codes RBT", "Oncorhynchus_mykiss/results_Oncorhynchus_mykiss.mat", dir))
parvalue=sapply(par$par, "[[", 1)[1:dim(par$par)[1]-1]
parname=attr(par$par,"dimnames")[[1]][1:dim(par$par)[1]-1]
param=list()
for (i in 1:length(parvalue)){
assign(parname[i],parvalue[i])
eval(parse(text=paste("param$", parname[i], "=",  parvalue[i], sep="")))}
#--- Add p_Am here to be sure it is the same even when pM changes over time    ???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
param$p_Am =  param$z * param$p.M / param$kap  # J/d.cm^2, max assimilation rate (eq coming from the fact that at Lmax, kap*pC=pM. And pC is provided by pA --> kap*pAm=pM)
#--- Missing parameters
param$w_E = 23.9
param$w_V = 23.9
param$M_V = param$d.V/ param$w_V     # mol/cm^3, volume-specific mass of structure
param$kap_G = param$mu.V * param$M_V / param$E.G     # -, growth efficiency
#### ------------------------------------
# ---- Forcing variables
#### ------------------------------------
param$f = 0.8
param$TempC = 8.5   #  en degres C
#### ------------------------------------
# ---- CALL Differential equations
#### ------------------------------------
source(paste(dir,"debODE_ABJ.R", sep="/"))
#########################################################################################################
####### ---------   COMPARE 'P_M VARYING' VS 'NOT VARYING'
#########################################################################################################
time=seq(1,1000, by=1)
#### ------------------------------------
# ---- WEIGHT AND LENGTH WHEN P_M NOT VARYING
#### ------------------------------------
LEHovertime_cont = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_cont) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_cont[,"L"]^3 +
LEHovertime_cont[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_cont[,"L"]/param$del.M        # cm, physical length
# SAVE
Wcont = W
Lcont = Lphysical
Econt = LEHovertime_cont[, "E"]
pMcont = param$p.M
Lbcont = LEHovertime_cont[length(LEHovertime_cont[,"Lb"]),"Lb"]
Ljcont = LEHovertime_cont[length(LEHovertime_cont[,"Lj"]),"Lj"]
sMcont = Ljcont/Lbcont
tbcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hb) == min(abs(LEHovertime_cont[,"H"] - param$E.Hb))),"time"]
tjcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hj) == min(abs(LEHovertime_cont[,"H"] - param$E.Hj))),"time"]
#### ------------------------------------
# ---- P_M VARY FOLLOWING SPRING AND DAMPER
#### ------------------------------------
source(paste(dir, "spring_and_damper_model.R", sep="/"))
time_for_pM=seq(0,length(time)+1, by=1)                    # +1 because in debODE_ABJ "floor(t)+1"
yini = c(0, 0)
ks = 1      # force of the spring
cs = 90         # resilience of the damper
Fpert = 10      # force of the perturbation     +- 10 for BPA30
tmin=0       # start of the pert (when Fpert applies)
tmax=30       # stop of the pert
# Create a p_M varying trought time
tp_M=ode(y=yini,func=spring_damper_model, times=time_for_pM, parms=c(ks,cs), method="ode45")
tp_M = as.data.frame(tp_M)
tp_M[, 2] = (tp_M[, 2]+1) * param$p.M
plot(time_for_pM, tp_M[,2], main="p_M over time", type="l", col="red")
param$p.M = tp_M[, c(1,2)]
#### ------------------------------------
# ---- Calculate change on a period of time
#### ------------------------------------
LEHovertime_var = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_var) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_var[,"L"]^3 +
LEHovertime_var[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_var[,"L"]/param$del_M        # cm, physical length
# SAVE
Wvar = W
Lvar = Lphysical
Evar = LEHovertime_var[,"E"]
pMvar = param$p.M
Lbvar=LEHovertime_var[length(LEHovertime_var[,"Lb"]),"Lb"]
Ljvar=LEHovertime_var[length(LEHovertime_var[,"Lj"]),"Lj"]
sMvar=Ljvar/Lbvar
tbvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hb) == min(abs(LEHovertime_var[,"H"] - param$E.Hb))),"time"]
tjvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hj) == min(abs(LEHovertime_var[,"H"] - param$E.Hj))),"time"]
#########################################################################################################
####### ---------   PLOT
#########################################################################################################
diff_W = (Wvar - Wcont)/Wcont*100
diff_pM = (pMvar[pMvar$time %in% time,2]-pMcont)/pMcont *100
diff_E = (Evar-Econt)/Econt *100
#plot(time, diff_pM, main="diff p_M varying VS stable p_M over time")
plot(time, diff_E, main="diff E varying VS stable p_M over time", type="p", col="red")
plot(time, diff_W, main="diff p_M varying VS stable p_M over time", type="p", col="red")
plot(time, Wvar, main="Weight over time", type="p", col="red")
points(time, Wcont, main="Weight over time", type="p", col="green")
abline(v=tbvar, col="red")
abline(v=tbcont, col="green")
abline(v=tjvar, col="red")
abline(v=tjcont, col="green")
#
# plot(time, W, main="Wet weight over time")
# plot(time, Lphysical, main="Physical length (cm) over time")
# plot(time, LEHovertime[, 3], main="E over time")
# # plot(time, LEHovertime[, 4], main="H over time")
rm(list=ls())
cat("\014")  # To clear the console
dir=dirname(rstudioapi::getActiveDocumentContext()$path)     # gets the name of the directory of the current script (works only in R studio)
library(akima)
library(R.matlab)
library(deSolve)
#########################################################################################################
####### ---------   PREPARE THE DEB FUNCTIONS AND ENVIRONMENT
#########################################################################################################
#### ------------------------------------
# ---- Initial state
#### ------------------------------------
LEH = numeric(6)
LEH[1] = 0.0001     # L
LEH[2] = 643.562     # E
LEH[3] = 0   # H
LEH[4] = 0     # E_R
LEH[5] = 0     # Lb, we don't know yet. Will be determined by the ode (when L reaches E_Hb)
LEH[6] = 0     # Lj, we don't know yet. Will be determined by the ode (when L reaches E_Hj)
#### ------------------------------------
# ---- CALL DEB PARAMETERS
#### ------------------------------------
#--- Manually transfered in R script
#source(paste(dir,"DEB param RBT.R", sep="/"))
#--- Automatically importes from .mat file
par=readMat(gsub("R codes RBT", "Oncorhynchus_mykiss/results_Oncorhynchus_mykiss.mat", dir))
parvalue=sapply(par$par, "[[", 1)[1:dim(par$par)[1]-1]
parname=attr(par$par,"dimnames")[[1]][1:dim(par$par)[1]-1]
param=list()
for (i in 1:length(parvalue)){
assign(parname[i],parvalue[i])
eval(parse(text=paste("param$", parname[i], "=",  parvalue[i], sep="")))}
#--- Add p_Am here to be sure it is the same even when pM changes over time    ???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
param$p_Am =  param$z * param$p.M / param$kap  # J/d.cm^2, max assimilation rate (eq coming from the fact that at Lmax, kap*pC=pM. And pC is provided by pA --> kap*pAm=pM)
#--- Missing parameters
param$w_E = 23.9
param$w_V = 23.9
param$M_V = param$d.V/ param$w_V     # mol/cm^3, volume-specific mass of structure
param$kap_G = param$mu.V * param$M_V / param$E.G     # -, growth efficiency
#### ------------------------------------
# ---- Forcing variables
#### ------------------------------------
param$f = 0.8
param$TempC = 8.5   #  en degres C
#### ------------------------------------
# ---- CALL Differential equations
#### ------------------------------------
source(paste(dir,"debODE_ABJ.R", sep="/"))
#########################################################################################################
####### ---------   COMPARE 'P_M VARYING' VS 'NOT VARYING'
#########################################################################################################
time=seq(1,1000, by=1)
#### ------------------------------------
# ---- WEIGHT AND LENGTH WHEN P_M NOT VARYING
#### ------------------------------------
LEHovertime_cont = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_cont) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_cont[,"L"]^3 +
LEHovertime_cont[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_cont[,"L"]/param$del.M        # cm, physical length
# SAVE
Wcont = W
Lcont = Lphysical
Econt = LEHovertime_cont[, "E"]
pMcont = param$p.M
Lbcont = LEHovertime_cont[length(LEHovertime_cont[,"Lb"]),"Lb"]
Ljcont = LEHovertime_cont[length(LEHovertime_cont[,"Lj"]),"Lj"]
sMcont = Ljcont/Lbcont
tbcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hb) == min(abs(LEHovertime_cont[,"H"] - param$E.Hb))),"time"]
tjcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hj) == min(abs(LEHovertime_cont[,"H"] - param$E.Hj))),"time"]
#### ------------------------------------
# ---- P_M VARY FOLLOWING SPRING AND DAMPER
#### ------------------------------------
source(paste(dir, "spring_and_damper_model.R", sep="/"))
time_for_pM=seq(0,length(time)+1, by=1)                    # +1 because in debODE_ABJ "floor(t)+1"
yini = c(0, 0)
ks = 1      # force of the spring
cs = 90         # resilience of the damper
Fpert = 30      # force of the perturbation     +- 10 for BPA30,   +- 20 for BPA100
tmin=0       # start of the pert (when Fpert applies)
tmax=30       # stop of the pert
# Create a p_M varying trought time
tp_M=ode(y=yini,func=spring_damper_model, times=time_for_pM, parms=c(ks,cs), method="ode45")
tp_M = as.data.frame(tp_M)
tp_M[, 2] = (tp_M[, 2]+1) * param$p.M
plot(time_for_pM, tp_M[,2], main="p_M over time", type="l", col="red")
param$p.M = tp_M[, c(1,2)]
#### ------------------------------------
# ---- Calculate change on a period of time
#### ------------------------------------
LEHovertime_var = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_var) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_var[,"L"]^3 +
LEHovertime_var[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_var[,"L"]/param$del_M        # cm, physical length
# SAVE
Wvar = W
Lvar = Lphysical
Evar = LEHovertime_var[,"E"]
pMvar = param$p.M
Lbvar=LEHovertime_var[length(LEHovertime_var[,"Lb"]),"Lb"]
Ljvar=LEHovertime_var[length(LEHovertime_var[,"Lj"]),"Lj"]
sMvar=Ljvar/Lbvar
tbvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hb) == min(abs(LEHovertime_var[,"H"] - param$E.Hb))),"time"]
tjvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hj) == min(abs(LEHovertime_var[,"H"] - param$E.Hj))),"time"]
#########################################################################################################
####### ---------   PLOT
#########################################################################################################
diff_W = (Wvar - Wcont)/Wcont*100
diff_pM = (pMvar[pMvar$time %in% time,2]-pMcont)/pMcont *100
diff_E = (Evar-Econt)/Econt *100
#plot(time, diff_pM, main="diff p_M varying VS stable p_M over time")
plot(time, diff_E, main="diff E varying VS stable p_M over time", type="p", col="red")
plot(time, diff_W, main="diff p_M varying VS stable p_M over time", type="p", col="red")
plot(time, Wvar, main="Weight over time", type="p", col="red")
points(time, Wcont, main="Weight over time", type="p", col="green")
abline(v=tbvar, col="red")
abline(v=tbcont, col="green")
abline(v=tjvar, col="red")
abline(v=tjcont, col="green")
#
# plot(time, W, main="Wet weight over time")
# plot(time, Lphysical, main="Physical length (cm) over time")
# plot(time, LEHovertime[, 3], main="E over time")
# # plot(time, LEHovertime[, 4], main="H over time")
rm(list=ls())
cat("\014")  # To clear the console
dir=dirname(rstudioapi::getActiveDocumentContext()$path)     # gets the name of the directory of the current script (works only in R studio)
library(akima)
library(R.matlab)
library(deSolve)
#########################################################################################################
####### ---------   PREPARE THE DEB FUNCTIONS AND ENVIRONMENT
#########################################################################################################
#### ------------------------------------
# ---- Initial state
#### ------------------------------------
LEH = numeric(6)
LEH[1] = 0.0001     # L
LEH[2] = 643.562     # E
LEH[3] = 0   # H
LEH[4] = 0     # E_R
LEH[5] = 0     # Lb, we don't know yet. Will be determined by the ode (when L reaches E_Hb)
LEH[6] = 0     # Lj, we don't know yet. Will be determined by the ode (when L reaches E_Hj)
#### ------------------------------------
# ---- CALL DEB PARAMETERS
#### ------------------------------------
#--- Manually transfered in R script
#source(paste(dir,"DEB param RBT.R", sep="/"))
#--- Automatically importes from .mat file
par=readMat(gsub("R codes RBT", "Oncorhynchus_mykiss/results_Oncorhynchus_mykiss.mat", dir))
parvalue=sapply(par$par, "[[", 1)[1:dim(par$par)[1]-1]
parname=attr(par$par,"dimnames")[[1]][1:dim(par$par)[1]-1]
param=list()
for (i in 1:length(parvalue)){
assign(parname[i],parvalue[i])
eval(parse(text=paste("param$", parname[i], "=",  parvalue[i], sep="")))}
#--- Add p_Am here to be sure it is the same even when pM changes over time    ???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
param$p_Am =  param$z * param$p.M / param$kap  # J/d.cm^2, max assimilation rate (eq coming from the fact that at Lmax, kap*pC=pM. And pC is provided by pA --> kap*pAm=pM)
#--- Missing parameters
param$w_E = 23.9
param$w_V = 23.9
param$M_V = param$d.V/ param$w_V     # mol/cm^3, volume-specific mass of structure
param$kap_G = param$mu.V * param$M_V / param$E.G     # -, growth efficiency
#### ------------------------------------
# ---- Forcing variables
#### ------------------------------------
param$f = 0.8
param$TempC = 8.5   #  en degres C
#### ------------------------------------
# ---- CALL Differential equations
#### ------------------------------------
source(paste(dir,"debODE_ABJ.R", sep="/"))
#########################################################################################################
####### ---------   COMPARE 'P_M VARYING' VS 'NOT VARYING'
#########################################################################################################
time=seq(1,1000, by=1)
#### ------------------------------------
# ---- WEIGHT AND LENGTH WHEN P_M NOT VARYING
#### ------------------------------------
LEHovertime_cont = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_cont) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_cont[,"L"]^3 +
LEHovertime_cont[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_cont[,"L"]/param$del.M        # cm, physical length
# SAVE
Wcont = W
Lcont = Lphysical
Econt = LEHovertime_cont[, "E"]
pMcont = param$p.M
Lbcont = LEHovertime_cont[length(LEHovertime_cont[,"Lb"]),"Lb"]
Ljcont = LEHovertime_cont[length(LEHovertime_cont[,"Lj"]),"Lj"]
sMcont = Ljcont/Lbcont
tbcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hb) == min(abs(LEHovertime_cont[,"H"] - param$E.Hb))),"time"]
tjcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hj) == min(abs(LEHovertime_cont[,"H"] - param$E.Hj))),"time"]
#### ------------------------------------
# ---- P_M VARY FOLLOWING SPRING AND DAMPER
#### ------------------------------------
source(paste(dir, "spring_and_damper_model.R", sep="/"))
time_for_pM=seq(0,length(time)+1, by=1)                    # +1 because in debODE_ABJ "floor(t)+1"
yini = c(0, 0)
ks = 1      # force of the spring
cs = 90         # resilience of the damper
Fpert = 15      # force of the perturbation     +- 10 for BPA30,   +- 20 for BPA100
tmin=0       # start of the pert (when Fpert applies)
tmax=30       # stop of the pert
# Create a p_M varying trought time
tp_M=ode(y=yini,func=spring_damper_model, times=time_for_pM, parms=c(ks,cs), method="ode45")
tp_M = as.data.frame(tp_M)
tp_M[, 2] = (tp_M[, 2]+1) * param$p.M
plot(time_for_pM, tp_M[,2], main="p_M over time", type="l", col="red")
param$p.M = tp_M[, c(1,2)]
#### ------------------------------------
# ---- Calculate change on a period of time
#### ------------------------------------
LEHovertime_var = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_var) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_var[,"L"]^3 +
LEHovertime_var[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_var[,"L"]/param$del_M        # cm, physical length
# SAVE
Wvar = W
Lvar = Lphysical
Evar = LEHovertime_var[,"E"]
pMvar = param$p.M
Lbvar=LEHovertime_var[length(LEHovertime_var[,"Lb"]),"Lb"]
Ljvar=LEHovertime_var[length(LEHovertime_var[,"Lj"]),"Lj"]
sMvar=Ljvar/Lbvar
tbvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hb) == min(abs(LEHovertime_var[,"H"] - param$E.Hb))),"time"]
tjvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hj) == min(abs(LEHovertime_var[,"H"] - param$E.Hj))),"time"]
#########################################################################################################
####### ---------   PLOT
#########################################################################################################
diff_W = (Wvar - Wcont)/Wcont*100
diff_pM = (pMvar[pMvar$time %in% time,2]-pMcont)/pMcont *100
diff_E = (Evar-Econt)/Econt *100
#plot(time, diff_pM, main="diff p_M varying VS stable p_M over time")
plot(time, diff_E, main="diff E varying VS stable p_M over time", type="p", col="red")
plot(time, diff_W, main="diff p_M varying VS stable p_M over time", type="p", col="red")
plot(time, Wvar, main="Weight over time", type="p", col="red")
points(time, Wcont, main="Weight over time", type="p", col="green")
abline(v=tbvar, col="red")
abline(v=tbcont, col="green")
abline(v=tjvar, col="red")
abline(v=tjcont, col="green")
#
# plot(time, W, main="Wet weight over time")
# plot(time, Lphysical, main="Physical length (cm) over time")
# plot(time, LEHovertime[, 3], main="E over time")
# # plot(time, LEHovertime[, 4], main="H over time")
rm(list=ls())
cat("\014")  # To clear the console
dir=dirname(rstudioapi::getActiveDocumentContext()$path)     # gets the name of the directory of the current script (works only in R studio)
library(akima)
library(R.matlab)
library(deSolve)
#########################################################################################################
####### ---------   PREPARE THE DEB FUNCTIONS AND ENVIRONMENT
#########################################################################################################
#### ------------------------------------
# ---- Initial state
#### ------------------------------------
LEH = numeric(6)
LEH[1] = 0.0001     # L
LEH[2] = 643.562     # E
LEH[3] = 0   # H
LEH[4] = 0     # E_R
LEH[5] = 0     # Lb, we don't know yet. Will be determined by the ode (when L reaches E_Hb)
LEH[6] = 0     # Lj, we don't know yet. Will be determined by the ode (when L reaches E_Hj)
#### ------------------------------------
# ---- CALL DEB PARAMETERS
#### ------------------------------------
#--- Manually transfered in R script
#source(paste(dir,"DEB param RBT.R", sep="/"))
#--- Automatically importes from .mat file
par=readMat(gsub("R codes RBT", "Oncorhynchus_mykiss/results_Oncorhynchus_mykiss.mat", dir))
parvalue=sapply(par$par, "[[", 1)[1:dim(par$par)[1]-1]
parname=attr(par$par,"dimnames")[[1]][1:dim(par$par)[1]-1]
param=list()
for (i in 1:length(parvalue)){
assign(parname[i],parvalue[i])
eval(parse(text=paste("param$", parname[i], "=",  parvalue[i], sep="")))}
#--- Add p_Am here to be sure it is the same even when pM changes over time    ???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
param$p_Am =  param$z * param$p.M / param$kap  # J/d.cm^2, max assimilation rate (eq coming from the fact that at Lmax, kap*pC=pM. And pC is provided by pA --> kap*pAm=pM)
#--- Missing parameters
param$w_E = 23.9
param$w_V = 23.9
param$M_V = param$d.V/ param$w_V     # mol/cm^3, volume-specific mass of structure
param$kap_G = param$mu.V * param$M_V / param$E.G     # -, growth efficiency
#### ------------------------------------
# ---- Forcing variables
#### ------------------------------------
param$f = 0.8
param$TempC = 8.5   #  en degres C
#### ------------------------------------
# ---- CALL Differential equations
#### ------------------------------------
source(paste(dir,"debODE_ABJ.R", sep="/"))
#########################################################################################################
####### ---------   COMPARE 'P_M VARYING' VS 'NOT VARYING'
#########################################################################################################
time=seq(1,1000, by=1)
#### ------------------------------------
# ---- WEIGHT AND LENGTH WHEN P_M NOT VARYING
#### ------------------------------------
LEHovertime_cont = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_cont) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_cont[,"L"]^3 +
LEHovertime_cont[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_cont[,"L"]/param$del.M        # cm, physical length
# SAVE
Wcont = W
Lcont = Lphysical
Econt = LEHovertime_cont[, "E"]
pMcont = param$p.M
Lbcont = LEHovertime_cont[length(LEHovertime_cont[,"Lb"]),"Lb"]
Ljcont = LEHovertime_cont[length(LEHovertime_cont[,"Lj"]),"Lj"]
sMcont = Ljcont/Lbcont
tbcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hb) == min(abs(LEHovertime_cont[,"H"] - param$E.Hb))),"time"]
tjcont = LEHovertime_cont[
which(abs(LEHovertime_cont[,"H"] - param$E.Hj) == min(abs(LEHovertime_cont[,"H"] - param$E.Hj))),"time"]
#### ------------------------------------
# ---- P_M VARY FOLLOWING SPRING AND DAMPER
#### ------------------------------------
source(paste(dir, "spring_and_damper_model.R", sep="/"))
time_for_pM=seq(0,length(time)+1, by=1)                    # +1 because in debODE_ABJ "floor(t)+1"
yini = c(0, 0)
ks = 1      # force of the spring
cs = 90         # resilience of the damper
Fpert = 12      # force of the perturbation     +- 10 for BPA30,   +- 12 for BPA100    +- 15 for BPA300
tmin=0       # start of the pert (when Fpert applies)
tmax=30       # stop of the pert
# Create a p_M varying trought time
tp_M=ode(y=yini,func=spring_damper_model, times=time_for_pM, parms=c(ks,cs), method="ode45")
tp_M = as.data.frame(tp_M)
tp_M[, 2] = (tp_M[, 2]+1) * param$p.M
plot(time_for_pM, tp_M[,2], main="p_M over time", type="l", col="red")
param$p.M = tp_M[, c(1,2)]
#### ------------------------------------
# ---- Calculate change on a period of time
#### ------------------------------------
LEHovertime_var = ode(y = LEH, func = debODE_ABJ, times = time,
parms = param,
method="ode45")
colnames(LEHovertime_var) = c("time", "L", "E", "H", "E_R", "Lb", "Lj")
W = LEHovertime_var[,"L"]^3 +
LEHovertime_var[,"E"] / param$d.E * param$w_E / param$mu.E   # g, wet weight
Lphysical = LEHovertime_var[,"L"]/param$del_M        # cm, physical length
# SAVE
Wvar = W
Lvar = Lphysical
Evar = LEHovertime_var[,"E"]
pMvar = param$p.M
Lbvar=LEHovertime_var[length(LEHovertime_var[,"Lb"]),"Lb"]
Ljvar=LEHovertime_var[length(LEHovertime_var[,"Lj"]),"Lj"]
sMvar=Ljvar/Lbvar
tbvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hb) == min(abs(LEHovertime_var[,"H"] - param$E.Hb))),"time"]
tjvar = LEHovertime_var[
which(abs(LEHovertime_var[,"H"] - param$E.Hj) == min(abs(LEHovertime_var[,"H"] - param$E.Hj))),"time"]
#########################################################################################################
####### ---------   PLOT
#########################################################################################################
diff_W = (Wvar - Wcont)/Wcont*100
diff_pM = (pMvar[pMvar$time %in% time,2]-pMcont)/pMcont *100
diff_E = (Evar-Econt)/Econt *100
#plot(time, diff_pM, main="diff p_M varying VS stable p_M over time")
plot(time, diff_E, main="diff E varying VS stable p_M over time", type="p", col="red")
plot(time, diff_W, main="diff p_M varying VS stable p_M over time", type="p", col="red")
plot(time, Wvar, main="Weight over time", type="p", col="red")
points(time, Wcont, main="Weight over time", type="p", col="green")
abline(v=tbvar, col="red")
abline(v=tbcont, col="green")
abline(v=tjvar, col="red")
abline(v=tjcont, col="green")
#
# plot(time, W, main="Wet weight over time")
# plot(time, Lphysical, main="Physical length (cm) over time")
# plot(time, LEHovertime[, 3], main="E over time")
# # plot(time, LEHovertime[, 4], main="H over time")
