#
# coord$condition_num=0
# coord$condition_num[coord$condition=="BPA3"]=3
# coord$condition_num[coord$condition=="BPA30"]=30
#
# mod=lm(Dim.1~condition_num, data=coord)
# summary(mod)
# mod=lm(Dim.1~condition, data=coord)
# anova(mod)
#
# kruskal.test(Dim.1~condition, data=coord)
#
# coord$GO=paste(GOs, collapse='_')           # in case several GOs asked
# coord$class=myclasse
#
# #### put in a dataframe
#
# if (exists("coord2")){
#   coord=rbind(coord2, coord)}
#
# coord2=coord
#
# # Save file
# #write.table(coord2, file=paste(dir, "/From heatmap followed by PCA/coord.txt", sep="") )
#
#
#
# rm("coord2")
# rm("coord")
##
plot.new()
#par(mar=c(7,4,4,2)+0.1)
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,25)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5), c(4,1,3), c(0,0,2), c(0,0,6))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.5,0.15,4)
,lhei=c(0.1,4,0.15,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=3
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
#select_for_PCA=matrice[out$rowInd[c(48:62)], c("tracking_id", "Description")]
GOs=c("GO:0019538")                           # "GO:0019538" protein metabolic process
# "GO:0006139" nucleobase-containing compound metabolic process
# "GO:0005975" carbohydrate metabolic process
# "GO:0006629" Lipid metabolic process
# "GO:0009056" catabolic process
# "GO:0006508" proteolysis
# "GO:0097264" self proteolysis
# "GO:0016570" histone modification
# "GO:0006304" DNA modification
# "GO:0006950" Response to stress
# "GO:0030163" Protein catabolic process
# "GO:0040008" Regulation of growth
# "GO:0019222" Regulation of metabolic process
# "GO:0006633" fatty acid biosynthetic process
# "GO:0006412" translation
# "GO:0006955" immune response
# "GO:0071898" regulation of estrogen receptor binding
# "GO:0006979" response to oxidative stress
# "GO:0071514" genetic imprinting
# "GO:0006730" one-carbon metabolic process
#find in ancestors
selection1=unique(GOtrout[GOtrout$ancestor %in% GOs,"GID"])
#find in GOs
selection2=unique(GOtrout[GOtrout$GO %in% GOs,"GID"])
#merge
selection=unique(c(selection1, selection2))
#selection=c("GSONMT00033758001",	"GSONMT00033759001",	"GSONMT00033968001",	"GSONMT00035215001",	"GSONMT00037629001",	"GSONMT00044581001",	"GSONMT00049280001",
# "GSONMT00051812001",	"GSONMT00052814001",	"GSONMT00052815001",	"GSONMT00055528001",	"GSONMT00057811001",	"GSONMT00064482001",	"GSONMT00065044001",	"GSONMT00067360001",
# "GSONMT00068889001",	"GSONMT00076108001",	"GSONMT00077443001",	"GSONMT00081507001",	"GSONMT00082137001")
# selection=selectall[grep("peroxi", selectall$Description), "test_id"]
#
# selection=selectall[c(grep("ring finger", selectall$Description),
#                       grep("proteasom", selectall$Description),
#                       grep("cathepsin", selectall$Description),
#                       grep("ubiquitin", selectall$Description),
#                       grep("autophagy", selectall$Description)) , c("test_id", "Description")]
# If want to do heatmap only on differentially expressed in one time point
if (onlydiffintp=="yes"){
tempdiff=selectall_bytp[which(selectall_bytp$generation==generation & selectall_bytp$dpf==dpf),]
selection=tempdiff[tempdiff$test_id %in% selection, c("test_id", "Description")]
} else selection=selectall[selectall$test_id %in% selection, c("test_id", "Description")]
names(selection)[1]="tracking_id"
##################################################### Keep only selected genes in values
# Selection, keep only condition and genes of interest
values.select=values[which(values$tracking_id %in% as.vector(selection$tracking_id)),]
# If want to do heatmap with mean per condition
if (onmeanpercond=="yes"){
meanpercond=aggregate(values.select$FPKM, list(values.select$cond, values.select$tracking_id), mean)
names(meanpercond)=c("cond", "tracking_id", "FPKM")
meanpercond=merge(meanpercond, unique(values.select[,c("cond", "condition", "generation", "dpf")]))
values.select=meanpercond
}
##################################################### #####################################################
########################                     Heatmap
##################################################### #####################################################
# Log transformation
values.select$logFPKM=log(values.select$FPKM + 1)
###### With all conditions
# matrice=values.select
# ###### with only some conditions
# matrice=values.select[which(values.select$dpf %in% c(112)),]
#
# ###### with only some conditions
# matrice=values.select[which(values.select$generation=="F1"),]
#
# ###### with only some conditions
matrice=values.select[which(values.select$generation %in% generation & values.select$dpf %in% dpf),]
################ transpose
summary(matrice)
if (onmeanpercond=="yes"){
matrice=matrice[, c("cond", "condition", "tracking_id", "logFPKM")]
matrice=matrice[order(matrice$condition),]
matrice=dcast(matrice, tracking_id~ condition, value.var="logFPKM")
} else {
matrice=matrice[, c("ID", "tracking_id", "logFPKM")]
matrice=dcast(matrice, tracking_id ~ ID, value.var="logFPKM")
}
matrice=merge(matrice, unique(selection[, c("tracking_id", "Description")]))
# normalisation (for one gene need min to max value --> zero-mean and unit-variance normalization)
temp=matrice[,-which(names(matrice) %in% c("tracking_id", "Description"))]
#temp=matrice[matrice$mycl==2, -which(names(matrice) %in% c("tracking_id", "Description", "mycl"))]
temp=as.matrix(temp)
temp=(temp-rowMeans(temp))/rowSds(temp)
matrice=matrice[which(is.na(temp[,1]) != TRUE),]
temp=temp[which(is.na(temp[,1]) != TRUE),]
# cluster info
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=2
matrice$mycl <- cutree(hr, k=nclass)
#matrice$mycl <- cutree(hr, h=1.5)
matrice$rownum=1:nrow(matrice)
rowcol=data.frame(mycl=c(1:length(unique(matrice$mycl))), rowcol=
c("yellow", "blue")
# rainbow(20)[c(1:length(unique(matrice$mycl)))+1]
)
matrice=merge(matrice, rowcol, sort=F)
matrice=matrice[order(matrice$rownum),]
# temp=temp[matrice$mycl=="2",]
# matrice=matrice[matrice$mycl=="2",]
# heatmap
colfunc <- colorRampPalette(c("blue", "black", "yellow"))
colour=colfunc(20)
if (onmeanpercond=="yes") {
colside=c("green", "red", "black")
} else colside=c("green", "green", "green", "green", "red", "red", "red", "red", "black", "black", "black", "black")
plot.new()
#par(mar=c(7,4,4,2)+0.1)
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,25)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5), c(4,1,3), c(0,0,2), c(0,0,6))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.5,0.15,4)
,lhei=c(0.1,4,0.15,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=3
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
#select_for_PCA=matrice[out$rowInd[c(48:62)], c("tracking_id", "Description")]
myclasse=c("1")           # 1 is orange dark, 2 is light orange, 3 is yellow, 4 is green yellow
plot.new()
#par(mar=c(7,4,4,2)+0.1)
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,25)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5), c(4,1,3), c(0,0,2), c(0,0,6))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.5,0.15,4)
,lhei=c(0.1,4,0.15,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
#select_for_PCA=matrice[out$rowInd[c(48:62)], c("tracking_id", "Description")]
myclasse=c("1")           # 1 is orange dark, 2 is light orange, 3 is yellow, 4 is green yellow
summary(temp)
matrice$description
matrice$Description
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,25)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5), c(4,1,3), c(0,0,2), c(0,0,6))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.5,0.15,4)
,lhei=c(0.1,4,0.15,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=4
matrice$mycl <- cutree(hr, k=nclass)
#matrice$mycl <- cutree(hr, h=1.5)
matrice$rownum=1:nrow(matrice)
rowcol=data.frame(mycl=c(1:length(unique(matrice$mycl))), rowcol=
c("yellow", "blue")
# rainbow(20)[c(1:length(unique(matrice$mycl)))+1]
)
matrice=merge(matrice, rowcol, sort=F)
matrice=matrice[order(matrice$rownum),]
# temp=temp[matrice$mycl=="2",]
# matrice=matrice[matrice$mycl=="2",]
# heatmap
colfunc <- colorRampPalette(c("blue", "black", "yellow"))
colour=colfunc(20)
if (onmeanpercond=="yes") {
colside=c("green", "red", "black")
} else colside=c("green", "green", "green", "green", "red", "red", "red", "red", "black", "black", "black", "black")
plot.new()
#par(mar=c(7,4,4,2)+0.1)
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,25)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5), c(4,1,3), c(0,0,2), c(0,0,6))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.5,0.15,4)
,lhei=c(0.1,4,0.15,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
#select_for_PCA=matrice[out$rowInd[c(48:62)], c("tracking_id", "Description")]
myclasse=c("1")
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=4
matrice$mycl <- cutree(hr, k=nclass)
#matrice$mycl <- cutree(hr, h=1.5)
matrice$rownum=1:nrow(matrice)
rowcol=data.frame(mycl=c(1:length(unique(matrice$mycl))), rowcol=
# c("yellow", "blue")
rainbow(20)[c(1:length(unique(matrice$mycl)))+1]
)
matrice=merge(matrice, rowcol, sort=F)
matrice=matrice[order(matrice$rownum),]
# temp=temp[matrice$mycl=="2",]
# matrice=matrice[matrice$mycl=="2",]
# heatmap
colfunc <- colorRampPalette(c("blue", "black", "yellow"))
colour=colfunc(20)
if (onmeanpercond=="yes") {
colside=c("green", "red", "black")
} else colside=c("green", "green", "green", "green", "red", "red", "red", "red", "black", "black", "black", "black")
plot.new()
#par(mar=c(7,4,4,2)+0.1)
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,25)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5), c(4,1,3), c(0,0,2), c(0,0,6))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.5,0.15,4)
,lhei=c(0.1,4,0.15,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
#select_for_PCA=matrice[out$rowInd[c(48:62)], c("tracking_id", "Description")]
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=4
matrice$mycl <- cutree(hr, k=nclass)
temp=matrice[,-which(names(matrice) %in% c("tracking_id", "Description"))]
#temp=matrice[matrice$mycl==2, -which(names(matrice) %in% c("tracking_id", "Description", "mycl"))]
temp=as.matrix(temp)
temp=(temp-rowMeans(temp))/rowSds(temp)
matrice=matrice[which(is.na(temp[,1]) != TRUE),]
temp=temp[which(is.na(temp[,1]) != TRUE),]
# cluster info
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=4
matrice$mycl <- cutree(hr, k=nclass)
matrice=values.select[which(values.select$generation %in% generation & values.select$dpf %in% dpf),]
################ transpose
summary(matrice)
if (onmeanpercond=="yes"){
matrice=matrice[, c("cond", "condition", "tracking_id", "logFPKM")]
matrice=matrice[order(matrice$condition),]
matrice=dcast(matrice, tracking_id~ condition, value.var="logFPKM")
} else {
matrice=matrice[, c("ID", "tracking_id", "logFPKM")]
matrice=dcast(matrice, tracking_id ~ ID, value.var="logFPKM")
}
matrice=merge(matrice, unique(selection[, c("tracking_id", "Description")]))
# normalisation (for one gene need min to max value --> zero-mean and unit-variance normalization)
temp=matrice[,-which(names(matrice) %in% c("tracking_id", "Description"))]
#temp=matrice[matrice$mycl==2, -which(names(matrice) %in% c("tracking_id", "Description", "mycl"))]
temp=as.matrix(temp)
temp=(temp-rowMeans(temp))/rowSds(temp)
matrice=matrice[which(is.na(temp[,1]) != TRUE),]
temp=temp[which(is.na(temp[,1]) != TRUE),]
# cluster info
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=4
matrice$mycl <- cutree(hr, k=nclass)
matrice$rownum=1:nrow(matrice)
rowcol=data.frame(mycl=c(1:length(unique(matrice$mycl))), rowcol=
# c("yellow", "blue")
rainbow(20)[c(1:length(unique(matrice$mycl)))+1]
)
matrice=merge(matrice, rowcol, sort=F)
matrice=matrice[order(matrice$rownum),]
# temp=temp[matrice$mycl=="2",]
# matrice=matrice[matrice$mycl=="2",]
# heatmap
colfunc <- colorRampPalette(c("blue", "black", "yellow"))
colour=colfunc(20)
if (onmeanpercond=="yes") {
colside=c("green", "red", "black")
} else colside=c("green", "green", "green", "green", "red", "red", "red", "red", "black", "black", "black", "black")
plot.new()
#par(mar=c(7,4,4,2)+0.1)
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,25)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5), c(4,1,3), c(0,0,2), c(0,0,6))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.5,0.15,4)
,lhei=c(0.1,4,0.15,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
myclasse=c("1")           # 1 is orange dark, 2 is light orange, 3 is yellow, 4 is green yellow
sumamry(matrice)
summary(matrice)
matrice$Description[matrice$mycl==1,]
matrice$Description[matrice$mycl==1]
matrice$Description[matrice$mycl==myclasse]
print(matrice$Description[matrice$mycl==myclasse])
as.data.frame(matrice$Description[matrice$mycl==myclasse])
library("R.matlab")
# The R script needs to be in the same folder as the .mat files.
setwd(getwd())
res=readMat("prdData.mat")$prdData[,,1]
for (name in names(res)){
temp=as.data.frame(res[name])
temp$diff=(temp[,3]-temp[,2])/temp[,3]*100        # (real values - prediction) / real values *100
plot(temp$diff~temp[,1], main=name, type="l")
abline(h=0, col="red", lty=2)
}
library("R.matlab")
# The R script needs to be in the same folder as the .mat files.
setwd(getwd())
getwd()
getwd()
setwd("~/GitHub/DEB_Oncorhynchus_mykiss/DEB_RBT")
getwd()
setwd("C:/")
getwd()
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
this.dir <- dirname(parent.frame(2)$R_prdData)
parent.frame(2)
getSrcDirectory()
?knitr
setwd("~/")
setwd("~/")
getwd()
setwd("~/")
setwd("~/GitHub/DEB_Oncorhynchus_mykiss/DEB_RBT")
source("R_prdData", chdir = T)
source("R_prdData.R", chdir = T)
getSrcDirectory(function(x) {x})
?getSrcDirectory
getSrcDirectory(function(x) {x}, full.names=T)
getSrcDirectory(function(x) {x}, full.names=TRUE
)
fn <- function(x) {
x + 1 # A comment, kept as part of the source
}
getSrcDirectory(fn)
getSrcLocation(fn, "line")
getSrcDirectory(fn)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(rstudioapi::getActiveDocumentContext()$path)
getActiveDocumentContext()
??getActiveDocumentContext
rstudioapi::getActiveDocumentContext()
setwd("~/GitHub/DEB_Oncorhynchus_mykiss/DEB_RBT")
dir="~/GitHub/DEB_Oncorhynchus_mykiss/DEB_RBT"
setwd(dir)
res=readMat("prdData.mat")$prdData[,,1]
for (name in names(res)){
temp=as.data.frame(res[name])
temp$diff=(temp[,3]-temp[,2])/temp[,3]*100        # (real values - prediction) / real values *100
plot(temp$diff~temp[,1], main=name, type="l")
abline(h=0, col="red", lty=2)
}
temp
