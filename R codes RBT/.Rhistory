########### Want to run heatmap on mean per condition
onmeanpercond="yes"
########### Genes to select based on GOs                      !!!!!!!!
GOs=c("GO:0006950")                           #  "GO:0006950" Response to stress
#find in ancestors
selection1=unique(GOtrout1[GOtrout1$ancestor %in% GOs,"GID"])
#find in GOs
selection2=unique(GOtrout1[GOtrout1$GO %in% GOs,"GID"])
#merge
selection=unique(c(selection1, selection2))
# If want to do heatmap only on differentially expressed in one time point
if (onlydiffintp=="yes"){
tempdiff=selectall_bytp[which(selectall_bytp$generation==generation & selectall_bytp$dpf==dpf),]
selection=tempdiff[tempdiff$test_id %in% selection, c("test_id", "Description")]
} else selection=selectall[selectall$test_id %in% selection, c("test_id", "Description")]
names(selection)[1]="tracking_id"
##################################################### Keep only selected genes in values
# Selection, keep only condition and genes of interest
values.select=values[which(values$tracking_id %in% as.vector(selection$tracking_id)),]
# If want to do heatmap with mean per condition
if (onmeanpercond=="yes"){
meanpercond=aggregate(values.select$FPKM, list(values.select$cond, values.select$tracking_id), mean)
names(meanpercond)=c("cond", "tracking_id", "FPKM")
meanpercond=merge(meanpercond, unique(values.select[,c("cond", "condition", "generation", "dpf")]))
values.select=meanpercond
}
##################################################### #####################################################
########################                     Heatmap
##################################################### #####################################################
# Log transformation
values.select$logFPKM=log(values.select$FPKM + 1)
###### With all conditions
# matrice=values.select
# ###### with only some conditions
# matrice=values.select[which(values.select$dpf %in% c(112)),]
#
# ###### with only some conditions
# matrice=values.select[which(values.select$generation=="F1"),]
#
# ###### with only some conditions
matrice=values.select[which(values.select$generation %in% generation & values.select$dpf %in% dpf),]
################ transpose
summary(matrice)
if (onmeanpercond=="yes"){
matrice=matrice[, c("cond", "condition", "tracking_id", "logFPKM")]
matrice=matrice[order(matrice$condition),]
matrice=dcast(matrice, tracking_id~ condition, value.var="logFPKM")
} else {
matrice=matrice[, c("ID", "tracking_id", "logFPKM")]
matrice=dcast(matrice, tracking_id ~ ID, value.var="logFPKM")
}
matrice=merge(matrice, unique(selection[, c("tracking_id", "Description")]))
################# normalisation (for one gene need min to max value --> zero-mean and unit-variance normalization)
temp=matrice[,-which(names(matrice) %in% c("tracking_id", "Description"))]
#temp=matrice[matrice$mycl==2, -which(names(matrice) %in% c("tracking_id", "Description", "mycl"))]
temp=as.matrix(temp)
temp=(temp-rowMeans(temp))/rowSds(temp)
matrice=matrice[which(is.na(temp[,1]) != TRUE),]
temp=temp[which(is.na(temp[,1]) != TRUE),]
################# cluster info
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=2
matrice$mycl <- cutree(hr, k=nclass)
#matrice$mycl <- cutree(hr, h=1.5)
matrice$rownum=1:nrow(matrice)
rowcol=data.frame(mycl=c(1:length(unique(matrice$mycl))), rowcol=
# c("yellow", "blue")
rainbow(20)[c(1:length(unique(matrice$mycl)))+1]
)
matrice=merge(matrice, rowcol, sort=F)
matrice=matrice[order(matrice$rownum),]
# temp=temp[matrice$mycl=="1",]
# matrice=matrice[matrice$mycl=="2",]
# heatmap
colfunc <- colorRampPalette(c("blue", "black", "yellow"))
colour=colfunc(200)
if (onmeanpercond=="yes") {
colside=c("green", "red", "black")
} else colside=c("green", "green", "green", "green", "red", "red", "red", "red", "black", "black", "black", "black")
l=length(temp[,1])
plot.new()
# tiff(paste(c(dir,"/heatmap_forJith_", "GO",colsplit(GOs, ":",names=c("x1", "x2"))[,2], "_",generation,"_", dpf, ".tiff"), collapse=""),
#     width=25,height=l/2.6, units="cm", res=600, compression="zip")
par(mar=c(7,4,4,2)+0.1)
#par(font.axis=1)
#par(family="Arial")
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,13)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5,0), c(4,1,3,0), c(0,0,2,0), c(0,0,6,0))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.4,0.12,2.5,3)
,lhei=c(0.1,l/4,l/120,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1.45
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
# dev.off()
###########################################################################################################################
#########################     Piechart for selected genes
###########################################################################################################################
ids=as.character(matrice$tracking_id) # run select first in Cuffdiff signi
####### save geneselected
eval(parse(text=paste("genesselected", "_", generation, "_", dpf, "= ids", sep="")))
GOtrout=select(org.OOmykiss.eg.db, keys=ids, columns=c("GO", "ONTOLOGY"), keytype="GID")
length(unique(ids))
length(unique(GOtrout$GID))
#basicProfile(GOtrout, onto="ALL", level=1)     does not work so need to do manually
############################# For biological process
# Finds ancestor of a GO for BP
envirName <- paste("GO", "BP", "ANCESTOR", sep = "")
envi=envi <- eval(parse(text = envirName))
getancestor= function(gocharacter){
anc=AnnotationDbi::mget(gocharacter, envi, ifnotfound = NA)
#  anc=as.vector(unlist(anc))
return(anc)
}
GOtrout=GOtrout[which(!is.na(GOtrout$GO)),]
GOtrout=GOtrout[which(GOtrout$ONTOLOGY=="BP"),]
length(unique(GOtrout$GID))                     # number of GID having a BP GO
ancestors=stack(getancestor(GOtrout$GO))
names(ancestors)=c("ancestor", "GO")
GOtrout=merge(GOtrout, ancestors)
GOtoAnc=unique(GOtrout[, c("GO", "GID", "ONTOLOGY", "ancestor")])
GOtoAnc$ancestor=GOtoAnc$GO
GOtrout=rbind(GOtrout, GOtoAnc)                                      # to add the GO to ancestor (now ancestor has ancestors GO and initial GO)
################################################### piechart on level 4
# get all GO in one level
GOslvl=getGOLevel("BP", level=4)
GOslvl=select(GO.db, GOslvl, "TERM", "GOID")
names(GOslvl)=c("ancestor", "term")
GOslvl=GOslvl[order(GOslvl$term),]
GOslvl$color=rainbow(length(GOslvl$term))                     ## give a color to each term of one level
# Get the genes in each level
inlvl=GOtrout[GOtrout$ancestor %in% GOslvl$ancestor,]
inlvl=unique(inlvl[,c("GID","ancestor")])
inlvl=merge(inlvl, GOslvl)
length(unique(inlvl$GID))                                     ## number of GID having not only "biological process" as GO
length(inlvl[,1])/length(unique(inlvl$GID))                   ## mean number of categories per GID (one GID can be part of several biological processes)
towrite = inlvl
towrite=towrite[,-4]
names(towrite)=c("GO term ID", "tracking_id", "GO term description")
towrite = merge(towrite, selection)
towrite=towrite[, c("tracking_id", "Description", "GO term ID", "GO term description")]
#write.table(towrite, paste(dirscript,"/", generation, ".txt", sep=""), sep="\t", row.names = F)
# get number of genes in each level
length_lvl=tapply(inlvl$GID, inlvl$term, length)
length_lvl=data.frame(num=length_lvl, term=names(length_lvl))
length_lvl=merge(length_lvl, GOslvl[,c("term", "color")])
#length(unique(ids))-length(unique(inlvl$GID))
#length_lvl=cbind(length_lvl)
# Copy first 20 GOs
length_lvl=length_lvl[order(length_lvl$num, decreasing=T),]
tocopy=length_lvl[c(1:20),c("term", "num")]
#  write.table(tocopy, file="clipboard", row.names=FALSE, sep="\t")
# Pie chart
color=rainbow(12)
length_lvl$term=as.character(length_lvl$term)
perc=length_lvl[,c("num")]/sum(length_lvl$num)*100
perc
length_lvl2=length_lvl
length_lvl2$term[perc<1]="other"
others=sum(length_lvl2[length_lvl2$term=="other","num"])
length_lvl2=length_lvl2[which(!length_lvl2$term=="other"),]
length_lvl2=rbind(length_lvl2, data.frame(term="other", num=as.numeric(others), color="white"))
pie3D(length_lvl2$num,labels=length_lvl2$term,explode=0.1,
main="Pie Chart of Gene Expressed in different biological process ", radius=.9, labelcex = 1.2,  start=0.7, theta=pi/4, col=length_lvl2$color)
length_lvl2[,c("term", "num")]
sum(length_lvl2$num)
length_lvl2[,c("num")]/sum(length_lvl2$num)*100
temp=length_lvl[which(length_lvl$term %in% c(length_lvl$term[c(1:7)], "developmental process")),]
temp=rbind(temp, data.frame(term="others", num=NaN, color="white"))
# plot(1, type="n", axes=F, xlab="", ylab="")
# source("http://www.pauljhurtado.com/R/legendxx.R")
# #legend("topleft",temp$term, col=temp$color, lwd=15, bty="n")
# legend("topleft",temp$term, fill=temp$color, bty="n", box.cex=c(3,1), y.intersp=1.2)
# Barplot
library(ggplot2)
temp=length_lvl2[c(1:6),]
temp=rbind(temp, data.frame(term=select(GO.db, GOs, "TERM", "GOID")$TERM, num=length(ids), color="grey"))
temp=temp[order(temp$num, decreasing = T),]
temp$term=factor(temp$term, levels=unique(temp$term))
temp$color=factor(temp$color, levels=unique(temp[,c("term", "color")])$color)
temp$generation=generation
temp$dpf=dpf
eval(parse(text=paste("temp_", generation, "_", dpf,  "=temp", sep="")))
ou
out
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,13)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5,0), c(4,1,3,0), c(0,0,2,0), c(0,0,6,0))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.4,0.12,2.5,3)
,lhei=c(0.1,l/4,l/120,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1.45
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
temp
########### Want to run heatmap on only the genes differentially expressed in "generation" and "dpf"
onlydiffintp="yes"
########### Want to run heatmap on mean per condition
onmeanpercond="yes"
########### Genes to select based on GOs                      !!!!!!!!
GOs=c("GO:0006950")                           #  "GO:0006950" Response to stress
#find in ancestors
selection1=unique(GOtrout1[GOtrout1$ancestor %in% GOs,"GID"])
#find in GOs
selection2=unique(GOtrout1[GOtrout1$GO %in% GOs,"GID"])
#merge
selection=unique(c(selection1, selection2))
# If want to do heatmap only on differentially expressed in one time point
if (onlydiffintp=="yes"){
tempdiff=selectall_bytp[which(selectall_bytp$generation==generation & selectall_bytp$dpf==dpf),]
selection=tempdiff[tempdiff$test_id %in% selection, c("test_id", "Description")]
} else selection=selectall[selectall$test_id %in% selection, c("test_id", "Description")]
names(selection)[1]="tracking_id"
##################################################### Keep only selected genes in values
# Selection, keep only condition and genes of interest
values.select=values[which(values$tracking_id %in% as.vector(selection$tracking_id)),]
# If want to do heatmap with mean per condition
if (onmeanpercond=="yes"){
meanpercond=aggregate(values.select$FPKM, list(values.select$cond, values.select$tracking_id), mean)
names(meanpercond)=c("cond", "tracking_id", "FPKM")
meanpercond=merge(meanpercond, unique(values.select[,c("cond", "condition", "generation", "dpf")]))
values.select=meanpercond
}
##################################################### #####################################################
########################                     Heatmap
##################################################### #####################################################
# Log transformation
values.select$logFPKM=log(values.select$FPKM + 1)
###### With all conditions
# matrice=values.select
# ###### with only some conditions
# matrice=values.select[which(values.select$dpf %in% c(112)),]
#
# ###### with only some conditions
# matrice=values.select[which(values.select$generation=="F1"),]
#
# ###### with only some conditions
matrice=values.select[which(values.select$generation %in% generation & values.select$dpf %in% dpf),]
################ transpose
summary(matrice)
if (onmeanpercond=="yes"){
matrice=matrice[, c("cond", "condition", "tracking_id", "logFPKM")]
matrice=matrice[order(matrice$condition),]
matrice=dcast(matrice, tracking_id~ condition, value.var="logFPKM")
} else {
matrice=matrice[, c("ID", "tracking_id", "logFPKM")]
matrice=dcast(matrice, tracking_id ~ ID, value.var="logFPKM")
}
matrice=merge(matrice, unique(selection[, c("tracking_id", "Description")]))
################# normalisation (for one gene need min to max value --> zero-mean and unit-variance normalization)
temp=matrice[,-which(names(matrice) %in% c("tracking_id", "Description"))]
#temp=matrice[matrice$mycl==2, -which(names(matrice) %in% c("tracking_id", "Description", "mycl"))]
temp=as.matrix(temp)
temp=(temp-rowMeans(temp))/rowSds(temp)
matrice=matrice[which(is.na(temp[,1]) != TRUE),]
temp=temp[which(is.na(temp[,1]) != TRUE),]
################# cluster info
hr <- hclust(as.dist(1-cor(t(temp), method="pearson")), method="complete")
nclass=2
matrice$mycl <- cutree(hr, k=nclass)
#matrice$mycl <- cutree(hr, h=1.5)
matrice$rownum=1:nrow(matrice)
rowcol=data.frame(mycl=c(1:length(unique(matrice$mycl))), rowcol=
# c("yellow", "blue")
rainbow(20)[c(1:length(unique(matrice$mycl)))+1]
)
matrice=merge(matrice, rowcol, sort=F)
matrice=matrice[order(matrice$rownum),]
# temp=temp[matrice$mycl=="1",]
# matrice=matrice[matrice$mycl=="2",]
# heatmap
colfunc <- colorRampPalette(c("blue", "black", "yellow"))
colour=colfunc(200)
if (onmeanpercond=="yes") {
colside=c("green", "red", "black")
} else colside=c("green", "green", "green", "green", "red", "red", "red", "red", "black", "black", "black", "black")
l=length(temp[,1])
plot.new()
# tiff(paste(c(dir,"/heatmap_forJith_", "GO",colsplit(GOs, ":",names=c("x1", "x2"))[,2], "_",generation,"_", dpf, ".tiff"), collapse=""),
#     width=25,height=l/2.6, units="cm", res=600, compression="zip")
par(mar=c(7,4,4,2)+0.1)
#par(font.axis=1)
#par(family="Arial")
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,13)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5,0), c(4,1,3,0), c(0,0,2,0), c(0,0,6,0))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.4,0.12,2.5,3)
,lhei=c(0.1,l/4,l/120,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1.45
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
plot.new()
out
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,13)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5,0), c(4,1,3,0), c(0,0,2,0), c(0,0,6,0))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.4,0.12,2.5,3)
,lhei=c(0.1,l/4,l/120,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1.45
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
plot.new()
# tiff(paste(c(dir,"/heatmap_forJith_", "GO",colsplit(GOs, ":",names=c("x1", "x2"))[,2], "_",generation,"_", dpf, ".tiff"), collapse=""),
#     width=25,height=l/2.6, units="cm", res=600, compression="zip")
par(mar=c(20,8,8,4)+0.1)
#par(font.axis=1)
#par(family="Arial")
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,13)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5,0), c(4,1,3,0), c(0,0,2,0), c(0,0,6,0))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.4,0.12,2.5,3)
,lhei=c(0.1,l/4,l/120,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1.45
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
plot.new()
tiff(paste(c(dir,"/heatmap_forJith_test_", "GO",colsplit(GOs, ":",names=c("x1", "x2"))[,2], "_",generation,"_", dpf, ".tiff"), collapse=""),
width=25,height=l/2.6, units="cm", res=600, compression="zip")
par(mar=c(7,4,4,2)+0.1)
#par(font.axis=1)
#par(family="Arial")
out=heatmap.2(temp
,col=colour
,Rowv = TRUE
,Colv=FALSE
,dendrogram=c("row")
,margins =c(0.3,13)
,trace="none"
,scale="none"
,labRow = matrice$Description
,labCol = ""
,density.info=c("none")
#               ,lmat = rbind(c(0,3),c(2,1),c(0,4))
#               ,lhei=c(0.7,4,1)
#               ,lwid=c(0.7,4)
#               ,lmat=rbind(c(0,0,4), c(3,1,2), c(0,0,5))           # with RowsideColors, 1=Rowside colors, 2=heatmap, 3=rowdendo, 4=coldendo, 5=key
#               ,lwid=c(0.7,0.2,4)
#               ,lhei=c(0.1,4,0.7)
,lmat=rbind(c(0,0,5,0), c(4,1,3,0), c(0,0,2,0), c(0,0,6,0))   # with RowsideColors and ColSideColors, 1=Rowside colors, 2=ColSideColors, 3=heatmap, 4=rowdendo, 5=coldendo, 6=key
,lwid=c(0.4,0.12,2.5,3)
,lhei=c(0.1,l/4,l/120,0.05)
,RowSideColors=as.character(matrice$rowcol)
,ColSideColors=colside
,key=FALSE
,srtCol=45
,cexRow=1.45
#              ,srtRow=-30
#            , main=paste(generation, dpf, "dpf", sep=" ")
)
dev.off()
paste(c(dir,"/heatmap_forJith_", "GO",colsplit(GOs, ":",names=c("x1", "x2"))[,2], "_",generation,"_", dpf, ".tiff")
)
length(temp)
length(temp[,1])
###########################################################################################################################
#########################     Piechart for selected genes
###########################################################################################################################
ids=as.character(matrice$tracking_id) # run select first in Cuffdiff signi
####### save geneselected
eval(parse(text=paste("genesselected", "_", generation, "_", dpf, "= ids", sep="")))
GOtrout=select(org.OOmykiss.eg.db, keys=ids, columns=c("GO", "ONTOLOGY"), keytype="GID")
length(unique(ids))
length(unique(GOtrout$GID))
#basicProfile(GOtrout, onto="ALL", level=1)     does not work so need to do manually
############################# For biological process
# Finds ancestor of a GO for BP
envirName <- paste("GO", "BP", "ANCESTOR", sep = "")
envi=envi <- eval(parse(text = envirName))
getancestor= function(gocharacter){
anc=AnnotationDbi::mget(gocharacter, envi, ifnotfound = NA)
#  anc=as.vector(unlist(anc))
return(anc)
}
GOtrout=GOtrout[which(!is.na(GOtrout$GO)),]
GOtrout=GOtrout[which(GOtrout$ONTOLOGY=="BP"),]
length(unique(GOtrout$GID))                     # number of GID having a BP GO
ancestors=stack(getancestor(GOtrout$GO))
names(ancestors)=c("ancestor", "GO")
GOtrout=merge(GOtrout, ancestors)
GOtoAnc=unique(GOtrout[, c("GO", "GID", "ONTOLOGY", "ancestor")])
GOtoAnc$ancestor=GOtoAnc$GO
GOtrout=rbind(GOtrout, GOtoAnc)                                      # to add the GO to ancestor (now ancestor has ancestors GO and initial GO)
################################################### piechart on level 4
# get all GO in one level
GOslvl=getGOLevel("BP", level=4)
GOslvl=select(GO.db, GOslvl, "TERM", "GOID")
names(GOslvl)=c("ancestor", "term")
GOslvl=GOslvl[order(GOslvl$term),]
GOslvl$color=rainbow(length(GOslvl$term))                     ## give a color to each term of one level
# Get the genes in each level
inlvl=GOtrout[GOtrout$ancestor %in% GOslvl$ancestor,]
inlvl=unique(inlvl[,c("GID","ancestor")])
inlvl=merge(inlvl, GOslvl)
length(unique(inlvl$GID))                                     ## number of GID having not only "biological process" as GO
length(inlvl[,1])/length(unique(inlvl$GID))                   ## mean number of categories per GID (one GID can be part of several biological processes)
towrite = inlvl
towrite=towrite[,-4]
names(towrite)=c("GO term ID", "tracking_id", "GO term description")
towrite = merge(towrite, selection)
towrite=towrite[, c("tracking_id", "Description", "GO term ID", "GO term description")]
length(towrite$tracking_id)
length(unique(towrite$tracking_id))
!unique(towrite$tracking_id)%in%unique((temp[,1]))
unique((temp[,1]))
head(temp)
row.names(temp)
head(matrice)
!unique(towrite$tracking_id)%in%unique(matrice$tracking_id)
!unique(matrice$tracking_id)%in%unique(towrite$tracking_id)
matrice[which(!unique(matrice$tracking_id)%in%unique(towrite$tracking_id)),]
GOtrout=select(org.OOmykiss.eg.db, keys=GSONMT00080902001, columns=c("GO", "ONTOLOGY"), keytype="GID")
GOtrout=select(org.OOmykiss.eg.db, keys="GSONMT00080902001", columns=c("GO", "ONTOLOGY"), keytype="GID")
GOtrout
